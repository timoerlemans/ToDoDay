---
description: 
globs: 
alwaysApply: true
---
# Angular State Rules

## Overview

This document outlines state management standards for Angular applications, focusing on state organization, state updates, and state persistence.

## State Organization

- Use proper state structure
- Implement state interfaces
- Use proper state initialization
- Handle state updates

### Good Examples

```typescript
// State interfaces
interface TodoState {
  todos: Todo[];
  loading: boolean;
  error: string | null;
  filters: {
    completed: boolean | null;
    search: string;
  };
}

interface AppState {
  todos: TodoState;
  auth: AuthState;
  ui: UiState;
}

// State service
@Injectable({
  providedIn: 'root',
})
export class TodoStateService {
  private readonly state = signal<TodoState>({
    todos: [],
    loading: false,
    error: null,
    filters: {
      completed: null,
      search: '',
    },
  });

  readonly todos$ = computed(() => this.state().todos);
  readonly loading$ = computed(() => this.state().loading);
  readonly error$ = computed(() => this.state().error);
  readonly filters$ = computed(() => this.state().filters);

  constructor(private readonly todoService: TodoService) {}

  loadTodos(): void {
    this.updateState({ loading: true, error: null });

    this.todoService
      .getTodos()
      .pipe(finalize(() => this.updateState({ loading: false })))
      .subscribe({
        next: todos => this.updateState({ todos }),
        error: error => this.updateState({ error: error.message }),
      });
  }

  addTodo(todo: CreateTodoDto): void {
    this.updateState({ loading: true, error: null });

    this.todoService
      .createTodo(todo)
      .pipe(finalize(() => this.updateState({ loading: false })))
      .subscribe({
        next: newTodo =>
          this.updateState(state => ({
            ...state,
            todos: [...state.todos, newTodo],
          })),
        error: error => this.updateState({ error: error.message }),
      });
  }

  updateFilters(filters: Partial<TodoState['filters']>): void {
    this.updateState(state => ({
      ...state,
      filters: { ...state.filters, ...filters },
    }));
  }

  private updateState(update: Partial<TodoState> | ((state: TodoState) => TodoState)): void {
    this.state.update(state => {
      if (typeof update === 'function') {
        return update(state);
      }
      return { ...state, ...update };
    });
  }
}
```

### Bad Examples

```typescript
// State without proper structure
@Injectable({
  providedIn: 'root',
})
export class TodoService {
  private todos: any[] = [];
  private loading = false;
  private error: any = null;

  loadTodos(): void {
    this.loading = true;
    this.error = null;

    this.http.get('/api/todos').subscribe({
      next: todos => {
        this.todos = todos;
        this.loading = false;
      },
      error: error => {
        this.error = error;
        this.loading = false;
      },
    });
  }
}

// State with mutable updates
@Injectable({
  providedIn: 'root',
})
export class TodoStateService {
  private state = {
    todos: [],
    loading: false,
    error: null,
  };

  loadTodos(): void {
    this.state.loading = true;
    this.state.error = null;

    this.http.get('/api/todos').subscribe({
      next: todos => {
        this.state.todos = todos;
        this.state.loading = false;
      },
      error: error => {
        this.state.error = error;
        this.state.loading = false;
      },
    });
  }
}
```

## State Updates

- Use immutable updates
- Handle async updates
- Implement proper error handling
- Use proper state selectors

### Good Examples

```typescript
// State selectors
export const selectTodos = (state: TodoState) => state.todos;
export const selectLoading = (state: TodoState) => state.loading;
export const selectError = (state: TodoState) => state.error;
export const selectFilteredTodos = (state: TodoState) => {
  const { todos, filters } = state;
  return todos.filter(todo => {
    if (filters.completed !== null && todo.completed !== filters.completed) {
      return false;
    }
    if (filters.search && !todo.title.toLowerCase().includes(filters.search.toLowerCase())) {
      return false;
    }
    return true;
  });
};

// State updates
@Injectable({
  providedIn: 'root',
})
export class TodoStateService {
  private readonly state = signal<TodoState>(initialState);

  readonly filteredTodos$ = computed(() => selectFilteredTodos(this.state()));

  updateTodo(id: string, updates: Partial<Todo>): void {
    this.updateState(state => ({
      ...state,
      todos: state.todos.map(todo => (todo.id === id ? { ...todo, ...updates } : todo)),
    }));
  }

  deleteTodo(id: string): void {
    this.updateState(state => ({
      ...state,
      todos: state.todos.filter(todo => todo.id !== id),
    }));
  }

  private updateState(update: (state: TodoState) => TodoState): void {
    this.state.update(update);
  }
}
```

### Bad Examples

```typescript
// State updates with mutation
@Injectable({
  providedIn: 'root',
})
export class TodoStateService {
  private state = {
    todos: [],
    loading: false,
    error: null,
  };

  updateTodo(id: string, updates: any): void {
    const todo = this.state.todos.find(t => t.id === id);
    if (todo) {
      Object.assign(todo, updates);
    }
  }

  deleteTodo(id: string): void {
    this.state.todos = this.state.todos.filter(t => t.id !== id);
  }
}
```

## State Persistence

- Implement proper storage
- Handle state rehydration
- Use proper serialization
- Handle storage errors

### Good Examples

```typescript
// State persistence service
@Injectable({
  providedIn: 'root',
})
export class StatePersistenceService {
  private readonly storageKey = 'app_state';

  constructor(
    private readonly storage: Storage,
    private readonly serializer: StateSerializer
  ) {}

  saveState(state: AppState): void {
    try {
      const serialized = this.serializer.serialize(state);
      this.storage.setItem(this.storageKey, serialized);
    } catch (error) {
      console.error('Error saving state:', error);
      // Handle storage error
    }
  }

  loadState(): AppState | null {
    try {
      const serialized = this.storage.getItem(this.storageKey);
      if (!serialized) return null;
      return this.serializer.deserialize(serialized);
    } catch (error) {
      console.error('Error loading state:', error);
      return null;
    }
  }

  clearState(): void {
    try {
      this.storage.removeItem(this.storageKey);
    } catch (error) {
      console.error('Error clearing state:', error);
      // Handle storage error
    }
  }
}

// State serializer
@Injectable({
  providedIn: 'root',
})
export class StateSerializer {
  serialize(state: AppState): string {
    return JSON.stringify(state);
  }

  deserialize(serialized: string): AppState {
    return JSON.parse(serialized);
  }
}
```

### Bad Examples

```typescript
// Basic state persistence
@Injectable({
  providedIn: 'root',
})
export class StatePersistenceService {
  saveState(state: any): void {
    localStorage.setItem('state', JSON.stringify(state));
  }

  loadState(): any {
    return JSON.parse(localStorage.getItem('state') || 'null');
  }

  clearState(): void {
    localStorage.removeItem('state');
  }
}
```

## Resources

- [Angular State Management](mdc:https:/angular.io/guide/state-management)
- [Angular Signals](mdc:https:/angular.io/guide/signals)
- [Angular NgRx](mdc:https:/ngrx.io)
